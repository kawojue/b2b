generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  businesses Business[]

  @@index([name])
}

model Business {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now())

  webhook   Webhook?
  customers Customer[]

  owner   User   @relation(references: [id], fields: [ownerId], onDelete: Cascade)
  ownerId String @db.Uuid

  @@index([name])
}

model Customer {
  id        String   @id @default(uuid()) @db.Uuid
  firstname String
  lastname  String
  email     String
  phone     String?
  idNumber  String?
  idType    IDType?
  userPhoto String?
  city      String?
  state     String?
  country   String?
  zipCode   String?
  line1     String?
  houseNo   String?
  bvn       String?
  idImage   String?
  dob       String?
  kycPassed Boolean  @default(false)
  cards     Card[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  business   Business @relation(references: [id], fields: [businessId], onDelete: Cascade)
  businessId String   @db.Uuid

  @@index([firstname, lastname, email])
}

model Card {
  id             String     @id @default(uuid()) @db.Uuid
  cardId         String?    @unique
  cardName       String?
  cardNumber     String?
  last4          String?
  cardType       CardType?
  cardBrand      CardBrand?
  expiry         String?
  cvv            String?
  valid          String?
  reference      String     @unique
  billingAddress Json?
  balance        Float      @default(0.00)
  status         CardStatus @default(pending)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  customer   Customer @relation(references: [id], fields: [customerId], onDelete: Cascade)
  customerId String   @db.Uuid
}

model Webhook {
  id  Int    @id @default(autoincrement())
  url String

  businessId String   @unique @db.Uuid
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

enum CardStatus {
  active
  frozen
  pending
  terminated
}

enum CardType {
  virtual
  giftcard
}

enum CardBrand {
  visa
  mastercard
}

enum IDType {
  NIN
  BVN
  PASSPORT
}
